-- MySQL Script generated by MySQL Workbench
-- Thu Jan  9 13:53:07 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema sanalfonso
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sanalfonso
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sanalfonso` DEFAULT CHARACTER SET utf8mb3 ;
USE `sanalfonso` ;

-- -----------------------------------------------------
-- Table `sanalfonso`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`usuario` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`usuario` (
  `idUsuario` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nickName` VARCHAR(30) NOT NULL,
  `password` VARCHAR(150) NOT NULL DEFAULT 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',
  `nombre` VARCHAR(40) NOT NULL,
  `primerApellido` VARCHAR(30) NOT NULL,
  `segundoApellido` VARCHAR(30) NULL DEFAULT NULL,
  `ci` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `fono` VARCHAR(15) NOT NULL,
  `sexo` CHAR(1) NOT NULL,
  `foto` VARCHAR(100) NULL DEFAULT NULL,
  `rol` TINYINT NOT NULL DEFAULT '0',
  `estado` TINYINT NOT NULL DEFAULT '2',
  `idAutor` INT UNSIGNED NULL DEFAULT '1',
  `fechaRegistro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`idUsuario`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;

CREATE UNIQUE INDEX `nickName_UNIQUE` ON `sanalfonso`.`usuario` (`nickName` ASC) VISIBLE;

CREATE UNIQUE INDEX `email_UNIQUE` ON `sanalfonso`.`usuario` (`email` ASC) VISIBLE;

CREATE UNIQUE INDEX `ci_UNIQUE` ON `sanalfonso`.`usuario` (`ci` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sanalfonso`.`membresia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`membresia` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`membresia` (
  `idMembresia` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `codigoSocio` VARCHAR(10) NULL DEFAULT NULL,
  `idUsuario` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idMembresia`),
  CONSTRAINT `fk_membresia_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sanalfonso`.`usuario` (`idUsuario`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `fk_membresia_usuario1_idx` ON `sanalfonso`.`membresia` (`idUsuario` ASC) VISIBLE;

CREATE INDEX `fk_membresia_usuario1_idx1` ON `sanalfonso`.`membresia` (`idUsuario` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sanalfonso`.`lectura`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`lectura` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`lectura` (
  `idLectura` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `lecturaAnterior` INT UNSIGNED NOT NULL DEFAULT '0',
  `lecturaActual` INT UNSIGNED NOT NULL,
  `estado` TINYINT NOT NULL DEFAULT '1',
  `fechaLectura` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  `idAutor` INT UNSIGNED NULL DEFAULT NULL,
  `idMembresia` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idLectura`),
  CONSTRAINT `fk_lectura_membresia1`
    FOREIGN KEY (`idMembresia`)
    REFERENCES `sanalfonso`.`membresia` (`idMembresia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `fk_lectura_membresia1_idx` ON `sanalfonso`.`lectura` (`idMembresia` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sanalfonso`.`tarifa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`tarifa` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`tarifa` (
  `idTarifa` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `tarifaMinima` DECIMAL(4,1) NOT NULL,
  `tarifaVigente` DECIMAL(4,1) NOT NULL,
  `idAutor` TINYINT NOT NULL,
  `estado` ENUM('vigente', 'vencido') NOT NULL DEFAULT 'vigente',
  `fechaInicioVigencia` DATETIME NULL DEFAULT NULL,
  `fechaActualizacion` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`idTarifa`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sanalfonso`.`avisocobranza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`avisocobranza` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`avisocobranza` (
  `idAviso` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `fechaVencimiento` DATE NULL DEFAULT NULL,
  `estado` ENUM('enviado', 'pagado', 'vencido', 'revision', 'rechazado', 'deshabilitado') NOT NULL DEFAULT 'enviado',
  `comprobante` VARCHAR(50) NULL DEFAULT NULL,
  `fechaPago` TIMESTAMP NULL DEFAULT NULL,
  `fechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  `idAutor` TINYINT NULL DEFAULT NULL,
  `saldo` DECIMAL(18,2) UNSIGNED NULL DEFAULT NULL,
  `idLectura` INT UNSIGNED NOT NULL,
  `idTarifa` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAviso`),
  CONSTRAINT `fk_avisocobranza_lectura`
    FOREIGN KEY (`idLectura`)
    REFERENCES `sanalfonso`.`lectura` (`idLectura`),
  CONSTRAINT `fk_avisocobranza_tarifa1`
    FOREIGN KEY (`idTarifa`)
    REFERENCES `sanalfonso`.`tarifa` (`idTarifa`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `fk_avisocobranza_lectura` ON `sanalfonso`.`avisocobranza` (`idLectura` ASC) VISIBLE;

CREATE INDEX `fk_avisocobranza_tarifa1_idx` ON `sanalfonso`.`avisocobranza` (`idTarifa` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sanalfonso`.`datalogger`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`datalogger` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`datalogger` (
  `idDatalogger` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `latitud` DECIMAL(10,8) NOT NULL,
  `longitud` DECIMAL(10,8) NOT NULL,
  `fechaRegistro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  `idAutor` INT UNSIGNED NOT NULL,
  `codigoDatalogger` VARCHAR(10) NULL DEFAULT NULL,
  `estado` TINYINT NOT NULL DEFAULT '2',
  `IP` VARCHAR(15) NULL DEFAULT '0.0.0.0',
  `puerto` TINYINT UNSIGNED NULL DEFAULT '13',
  PRIMARY KEY (`idDatalogger`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sanalfonso`.`lectura_temp`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`lectura_temp` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`lectura_temp` (
  `idLectura` TINYINT NOT NULL AUTO_INCREMENT,
  `lecturaAnterior` INT NOT NULL,
  `lecturaActual` INT NOT NULL,
  `fechaLectura` TIMESTAMP NULL DEFAULT NULL,
  `codigoMedidor` VARCHAR(10) NULL DEFAULT NULL,
  `codigoDatalogger` VARCHAR(15) NULL DEFAULT NULL,
  `codigoSocio` VARCHAR(15) NULL DEFAULT NULL,
  `IP` VARCHAR(15) NULL DEFAULT NULL,
  `nombreSocio` VARCHAR(45) NULL DEFAULT NULL,
  `tarifaVigente` DECIMAL(4,1) NULL DEFAULT NULL,
  PRIMARY KEY (`idLectura`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sanalfonso`.`medidor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`medidor` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`medidor` (
  `idMedidor` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `estado` TINYINT NOT NULL DEFAULT '1',
  `fechaRegistro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  `idAutor` TINYINT UNSIGNED NOT NULL,
  `latitud` DECIMAL(10,8) NULL DEFAULT NULL,
  `longitud` DECIMAL(10,8) NULL DEFAULT NULL,
  `codigoMedidor` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`idMedidor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sanalfonso`.`pago`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`pago` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`pago` (
  `idPago` TINYINT NOT NULL AUTO_INCREMENT,
  `monto` DOUBLE NOT NULL,
  `fechaPago` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `metodoPago` VARCHAR(30) NOT NULL,
  `estado` ENUM('pendiente', 'revision', 'aprobado', 'rechazado') NOT NULL DEFAULT 'pendiente',
  `comprobante` VARCHAR(10) NOT NULL,
  `idAviso` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idPago`),
  CONSTRAINT `fk_pago_avisocobranza1`
    FOREIGN KEY (`idAviso`)
    REFERENCES `sanalfonso`.`avisocobranza` (`idAviso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

CREATE INDEX `fk_pago_avisocobranza1_idx` ON `sanalfonso`.`pago` (`idAviso` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sanalfonso`.`qr`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`qr` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`qr` (
  `idQr` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `fechaVencimiento` DATE NULL DEFAULT NULL,
  `img` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`idQr`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `sanalfonso`.`reporteconsumo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`reporteconsumo` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`reporteconsumo` (
  `idReporteConsumo` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idMembresia` TINYINT UNSIGNED NOT NULL,
  `socio` VARCHAR(100) NOT NULL,
  `codigoSocio` VARCHAR(10) NOT NULL,
  `consumo` INT UNSIGNED NOT NULL,
  `fechaLectura` DATE NOT NULL,
  `observacion` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`idReporteConsumo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `sanalfonso`.`reportepagosconsumos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sanalfonso`.`reportepagosconsumos` ;

CREATE TABLE IF NOT EXISTS `sanalfonso`.`reportepagosconsumos` (
  `idReportePago` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idAviso` INT UNSIGNED NOT NULL,
  `idMembresia` TINYINT UNSIGNED NOT NULL,
  `socio` VARCHAR(100) NOT NULL,
  `codigoSocio` VARCHAR(10) NOT NULL,
  `consumo` DECIMAL(10,2) UNSIGNED NOT NULL,
  `totalPagado` DECIMAL(18,2) UNSIGNED NOT NULL,
  `fechaLectura` DATE NOT NULL,
  `fechaPago` TIMESTAMP NOT NULL,
  `estado` ENUM('pagado', 'vencido', 'rechazado', 'deshabilitado', 'habilitado', 'revision') NOT NULL DEFAULT 'habilitado',
  `idAutor` TINYINT UNSIGNED NOT NULL,
  `observacion` VARCHAR(50) NULL DEFAULT NULL,
  `fechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`idReportePago`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

USE `sanalfonso` ;

-- -----------------------------------------------------
-- function ufcPorcentajeAvisos
-- -----------------------------------------------------

USE `sanalfonso`;
DROP function IF EXISTS `sanalfonso`.`ufcPorcentajeAvisos`;

DELIMITER $$
USE `sanalfonso`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ufcPorcentajeAvisos`() RETURNS decimal(3,1)
    DETERMINISTIC
BEGIN
	-- DECLARE _res VARCHAR (300) DEFAULT 'Sin porcentaje';
	DECLARE _porcentaje DECIMAL(3,1) DEFAULT 0;
    DECLARE _totales, _vencidosRechazados INT;
    
    SELECT COUNT(*) INTO _vencidosRechazados
	FROM avisocobranza A
	-- INNER JOIN lectura L ON A.idLectura = L.idLectura
	WHERE A.estado = 'vencido';
		-- AND YEAR(L.fechaLectura) = (SELECT YEAR(MAX(fechaLectura))FROM lectura WHERE estado <> 0)
		-- AND MONTH(L.fechaLectura) = (SELECT MONTH(MAX(fechaLectura))FROM lectura WHERE estado <> 0);

	SELECT COUNT(*) INTO _totales -- L.fechaLectura
	FROM avisocobranza A
	-- INNER JOIN lectura L ON A.idLectura = L.idLectura
	WHERE A.estado <> 'deshabilitado';
		-- AND YEAR(L.fechaLectura) = (SELECT YEAR(MAX(fechaLectura))FROM lectura WHERE estado <> 0)
		-- AND MONTH(L.fechaLectura) = (SELECT MONTH(MAX(fechaLectura))FROM lectura WHERE estado <> 0);

    IF _totales > 0 THEN
		SET _porcentaje = (_vencidosRechazados*100)/_totales;
		-- SET _res = CONCAT(_porcentaje,'% del total');
    END IF;
    RETURN _porcentaje;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure uspConsumoTotalUltimaLectura
-- -----------------------------------------------------

USE `sanalfonso`;
DROP procedure IF EXISTS `sanalfonso`.`uspConsumoTotalUltimaLectura`;

DELIMITER $$
USE `sanalfonso`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `uspConsumoTotalUltimaLectura`()
BEGIN
	SELECT IFNULL(SUM((L.lecturaActual-L.lecturaAnterior)/100),0) AS consumo,
		   (SELECT IFNULL(SUM(
					IF((L2.lecturaActual-L2.lecturaAnterior)/100 >=10,
					   (L2.lecturaActual-L2.lecturaAnterior)*T2.tarifaVigente/100,
						T2.tarifaMinima)),0)
           FROM lectura L2
           INNER JOIN avisocobranza A2 ON L2.idLectura = A2.idLectura
           INNER JOIN tarifa T2 ON T2.idTarifa = A2.idTarifa
           WHERE A2.estado = 'pagado'
              AND YEAR(L2.fechaLectura) = (SELECT YEAR(MAX(fechaLectura)) FROM lectura WHERE estado = 1)
              AND MONTH(L2.fechaLectura) = (SELECT MONTH(MAX(fechaLectura)) FROM lectura WHERE estado = 1)) AS pago,
		   MAX(L.fechaLectura) AS fechaLectura
    FROM lectura L
    -- INNER JOIN avisocobranza A ON L.idLectura = A.idLectura -- VERIFICAR UTILIDAD DE INNER JOIN AVISOCOBRANZA
    -- INNER JOIN tarifa T ON A.idTarifa = T.idTarifa -- VERIFICAR UTILIDAD DE INNER JOIN TARIFA
	WHERE L.estado = 1
		-- AND date_format(L.fechaLectura, '%Y,%m')=(SELECT date_format(MAX(fechaLectura),'%Y,%m') FROM lectura WHERE estado=1)
		AND YEAR(L.fechaLectura) = (SELECT YEAR(MAX(fechaLectura))FROM lectura WHERE estado = 1)
		AND MONTH(L.fechaLectura) = (SELECT MONTH(MAX(fechaLectura))FROM lectura WHERE estado = 1);
    -- GROUP BY 2, L.fechaLectura;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure uspDarBajaTarifaAlInsertar
-- -----------------------------------------------------

USE `sanalfonso`;
DROP procedure IF EXISTS `sanalfonso`.`uspDarBajaTarifaAlInsertar`;

DELIMITER $$
USE `sanalfonso`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `uspDarBajaTarifaAlInsertar`( IN _tarifaMinima DECIMAL(4,1), IN _tarifaVigente DECIMAL(4,1), IN _idAutor TINYINT)
BEGIN
    DECLARE _idTarifaMax INT;
	
    -- Actualizar la tarifa vigente a vencido
    SELECT MAX(idTarifa) INTO _idTarifaMax
    FROM tarifa
    WHERE estado = 'vigente';
	
    IF (_idTarifaMax IS NOT NULL) THEN
        UPDATE tarifa SET estado = 'vencido', fechaActualizacion = CURRENT_TIMESTAMP, idAutor = _idAutor WHERE idTarifa = _idTarifaMax;
    END IF;

    -- Insertar la nueva tarifa
    INSERT INTO tarifa (tarifaMinima, tarifaVigente, idAutor)
    VALUES (_tarifaMinima, _tarifaVigente, _idAutor);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure uspGenerarAvisosDeCobranza
-- -----------------------------------------------------

USE `sanalfonso`;
DROP procedure IF EXISTS `sanalfonso`.`uspGenerarAvisosDeCobranza`;

DELIMITER $$
USE `sanalfonso`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `uspGenerarAvisosDeCobranza`()
BEGIN
    DECLARE fecha_actual DATE;
    SET fecha_actual = CURDATE();

    -- Insertar nuevos avisos de cobranza para cada usuario con una lectura actual pendiente
    INSERT INTO avisoCobranza (totalPagar, fechaEmision, fechaVencimiento, estado, idTarifa, idUsuario, idLectura, codigoQR)
    SELECT 
        (l.lecturaActual * t.tarifaMinima) AS totalPagar, -- Calcular el total a pagar basado en la lectura actual y la tarifa mínima
        fecha_actual AS fechaEmision,
        DATE_ADD(fecha_actual, INTERVAL 30 DAY) AS fechaVencimiento,
        'pendiente' AS estado, -- Establecer el estado del aviso de cobranza como 'pendiente'
        t.idTarifa,
        u.idUsuario,
        l.idLectura,
        NULL AS codigoQR -- Inicialmente el código QR estará vacío
    FROM lectura l
    JOIN medidor m ON l.idMedidor = m.idMedidor
    JOIN membresia mb ON m.idMembresia = mb.idMembresia
    JOIN usuario u ON mb.idUsuario = u.idUsuario
    JOIN tarifa t ON t.idLectura = l.idLectura -- Relacionar tarifa directamente con lectura
    WHERE u.rol = 0  -- Filtrar solo a los usuarios que son socios
      AND l.estado = 1 -- Solo considerar lecturas con estado = 1 para generar avisos
      AND NOT EXISTS (
          SELECT 1 FROM avisoCobranza a WHERE a.idLectura = l.idLectura
      ); -- Solo insertar si no existe un aviso previo para esta lectura
END$$

DELIMITER ;
USE `sanalfonso`;

DELIMITER $$

USE `sanalfonso`$$
DROP TRIGGER IF EXISTS `sanalfonso`.`trgGenerarAvisoCobranza` $$
USE `sanalfonso`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `sanalfonso`.`trgGenerarAvisoCobranza`
AFTER INSERT ON `sanalfonso`.`lectura`
FOR EACH ROW
BEGIN
	DECLARE _idTarifa TINYINT;
    DECLARE _idQr INT;
    
    SELECT MAX(idTarifa) INTO _idTarifa
    FROM tarifa
    WHERE estado = 'vigente';
    
    SELECT MAX(idQr) INTO _idQr
    FROM qr;
    
    
   IF NOT EXISTS (
        SELECT 1 
        FROM avisoCobranza AC
        INNER JOIN lectura L2 ON AC.idLectura = L2.idLectura
        WHERE L2.idMedidor = NEW.idMedidor
        AND DATE_FORMAT(L2.fechaLectura, '%Y-%m') = DATE_FORMAT(NEW.fechaLectura, '%Y-%m')
    ) THEN
        -- Insertar un aviso de cobranza si no existe uno para el mismo mes y medidor
        INSERT INTO avisoCobranza (idTarifa, idLectura, idQr, fechaVencimiento)
        VALUES (_idTarifa, NEW.idLectura, _idQr, DATE_ADD(NEW.fechaLectura, INTERVAL 1 MONTH));
    END IF;
END$$


USE `sanalfonso`$$
DROP TRIGGER IF EXISTS `sanalfonso`.`tgrDeshabilitarLectura` $$
USE `sanalfonso`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `sanalfonso`.`tgrDeshabilitarLectura`
BEFORE UPDATE ON `sanalfonso`.`lectura`
FOR EACH ROW
BEGIN
	DECLARE _id TINYINT;
    
    SELECT A.idAviso INTO _id
    FROM lectura L
    INNER JOIN avisocobranza A ON L.idLectura = A.idLectura
    WHERE L.idLectura = NEW.idLectura;
    
    IF EXISTS (SELECT idAviso FROM avisocobranza WHERE idAviso = _id) THEN
		IF NEW.estado = 0 THEN
			UPDATE avisocobranza SET estado = 'deshabilitado', fechaActualizacion = CURRENT_TIMESTAMP WHERE idAviso = _id;
		ELSE
			UPDATE avisocobranza SET estado = 'enviado', fechaActualizacion = CURRENT_TIMESTAMP WHERE idAviso = _id;
		END IF;
    END IF;
END$$


USE `sanalfonso`$$
DROP TRIGGER IF EXISTS `sanalfonso`.`tgrUpdateReportePagos` $$
USE `sanalfonso`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `sanalfonso`.`tgrUpdateReportePagos`
BEFORE UPDATE ON `sanalfonso`.`avisocobranza`
FOR EACH ROW
BEGIN
	DECLARE _idMembresia INT;
    DECLARE _codigoSocio VARCHAR(15);
    DECLARE _socio VARCHAR(100);
    DECLARE _consumo DECIMAL(10,2);
    DECLARE _total DECIMAL (18,2);
    DECLARE _fechaLectura DATE;
    DECLARE _obs VARCHAR(40);
    
    SELECT ME.idMembresia, CONCAT_WS(' ', U.nombre, U.primerApellido, IFNULL(U.segundoApellido,'')),
		   ME.codigoSocio,(L.lecturaActual - L.lecturaAnterior)/100,
           -- (L.lecturaActual - L.lecturaAnterior)*T.tarifaVigente/100,
           IF((L.lecturaActual - L.lecturaAnterior) / 100 >= 10, 
		   (L.lecturaActual - L.lecturaAnterior)*T.tarifaVigente/100, 
		   T.tarifaMinima),
           L.fechaLectura
	INTO _idMembresia,_socio, _codigoSocio, _consumo, _total, _fechaLectura
	FROM avisocobranza A
	INNER JOIN lectura L ON A.idLectura = L.idLectura
	INNER JOIN medidor M ON L.idMedidor = M.idMedidor
	INNER JOIN membresia ME ON M.idMembresia = ME.idMembresia
    INNER JOIN usuario U ON ME.idUsuario = U.idUsuario
	INNER JOIN tarifa T ON A.idTarifa = T.idTarifa
	WHERE A.idAviso = NEW.idAviso;
    
    -- crear registro en reportepagos si aviso cambia de estado revision a pagado
	IF NOT EXISTS (SELECT idAviso FROM reportepagosconsumos WHERE idAviso = NEW.idAviso) THEN
		IF NEW.estado = 'pagado' AND OLD.estado = 'revision' THEN
			IF _consumo = 0 THEN
				SET _obs = 'Sin cosumo';
			END IF;
			CASE
				WHEN (_consumo < 10)THEN
					SET _obs = 'Consumo Mínimo'; 
				WHEN  (_consumo < 20)THEN
					SET _obs = 'Consumo Moderado'; 
				WHEN  (_consumo < 30)THEN
					SET _obs = 'Consumo Estándar';
				WHEN  (_consumo < 40)THEN
					SET _obs = 'Consumo Elevado'; 
				ELSE
					SET _obs = 'Consumo Muy Elevado';
			END CASE;
			INSERT reportepagosconsumos (idAviso, idMembresia, socio, codigoSocio, consumo, totalPagado, fechaLectura, fechaPago, estado, idAutor, observacion)
			VALUES(NEW.idAviso, _idMembresia, _socio, _codigoSocio,_consumo, _total, _fechaLectura, OLD.fechaPago, NEW.estado, @idAutor, _obs);
		END IF;
	ELSE
		-- dar de baja reporte si el administrador comete error al actualizar aviso de cobranza
		IF NEW.estado = 'revision' AND OLD.estado = 'pagado' THEN
			UPDATE reportepagosconsumos SET estado = 'deshabilitado', fechaActualizacion = CURRENT_TIMESTAMP, idAutor=@idAutor WHERE idAviso = NEW.idAviso;
		END IF;
        
        IF NEW.estado = 'pagado' AND OLD.estado = 'revision' THEN
			UPDATE reportepagosconsumos SET estado = 'pagado', fechaActualizacion = CURRENT_TIMESTAMP, idAutor=@idAutor WHERE idAviso = NEW.idAviso;
		END IF;
        
    END IF;
END$$


USE `sanalfonso`$$
DROP TRIGGER IF EXISTS `sanalfonso`.`trgInserMedidor` $$
USE `sanalfonso`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `sanalfonso`.`trgInserMedidor`
AFTER INSERT ON `sanalfonso`.`datalogger`
FOR EACH ROW
BEGIN
	DECLARE _codigoMedidor VARCHAR (10);
    
	SELECT CONCAT('M-', SUBSTRING(U.primerApellido, 1, 2), SUBSTRING(U.nombre, LENGTH(U.nombre), 1)) INTO _codigoMedidor
    FROM membresia M
    INNER JOIN usuario U ON M.idUsuario = U.idUsuario
    WHERE M.idMembresia = @idMembresia;
    
    INSERT INTO medidor (idAutor, latitud, longitud, codigoMedidor, idDatalogger, idMembresia)
	VALUES (NEW.idAutor, NEW.latitud, NEW.longitud, _codigoMedidor, NEW.idDatalogger, @idMembresia);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
